class component and function component
    hooks: for function component (look up other than useState)

src:
Steven  to  Everyone 9:28 PM
import React, {useState} from 'react'

// class App extends React.Component {

//   state = {
//     count: 1
//   }

//   handleClick = () => {
//     this.setState({
//       count: this.state.count + 1
//     })
//   }

//   render() {
//     console.log('render')
//     return (
//       <div className="App">
//         <h1> class component Hello world</h1>
//         <div>count: {this.state.count}</div>
//         <button onClick={this.handleClick}>increase</button>
//       </div>
//     );
//   }
// }

function App() {
  const [count, setCount] = useState(0)

  const handleSubmit = () => {
    setCount(count + 1)
  }
  console.log('render')
  return (
    <div className="App">
      <h1>function component Hello world</h1>
      <div>{count}</div>
      <button onClick={handleSubmit}>increase</button>
    </div>
  );
}

export default App;

promise

todolist: 
    add term with button
    delete term 
    filter active/completed
    modify term


express.js watch video

Redux
  State management library
    As React application gets larger, state amount enlarges to
    Redux is a tool that manages these states
  
  View/UI: React Component
  Store: Storage of all states
    UI communicates wtih Store to extract state, contrary to using useState(Subscribe)

  Action: Any actions performed by user, dispatched by UI(onClick)

  Reducer: Only method of modifying states

